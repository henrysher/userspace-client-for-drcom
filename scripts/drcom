#! /bin/sh
# drcom-client 
# Linux kernel module init script
# description: drcom Linux kernel module
#
### BEGIN INIT INFO
# Provides:       drcom
# Short-Description: drcom Linux kernel module
### END INIT INFO

## How to make drcom init script as a dameon while starting at boot-up
#
# == For Ubuntu/Redhat/SUSE ==
# Choose RUN LEVEL 5
# # ln -s /etc/init.d/drcom /etc/rc.5/drcom
#
# == For Gentoo ==
# Choose RUN LEVEL 3
# # ln -s /etc/init.d/drcom /etc/runlevels/boot/drcom
# 
# == For ArchLinux ==
# $ vi /etc/rc.conf
# Add "drcom" in DAEMONS array
# "DAEMONS=(syslog-ng network netfs crond drcom)"
#
## END

MODULE_NAME="drcom"
PATH=/sbin:/bin:/usr/sbin:/usr/bin:$PATH
LOG="/var/log/$MODULE_NAME-install.log"
BUILDDRCOM="$INSTALL_DIR/src/mkdrcom"

## FIXME: Ubuntu,etc. does have /lib/lsb/init-functins, 
# but it does not adpot the standard LSB INIT Script.
# Maybe in the next version, we will imporve it.

[ -f /lib/lsb/init-functions ] || NOLSB=yes
if [ -n "$NOLSB" ]; then
	if [ -f /etc/redhat-release ]; then
    	 system=redhat
	elif [ -f /etc/SuSE-release ]; then
    	 system=suse
	elif [ -f /etc/gentoo-release ]; then
    	 system=gentoo
	elif [ -f /etc/arch-release ]; then
    	 system=archlinux
	fi
fi

if [ -z "$NOLSB" ]; then
    . /lib/lsb/init-functions
    fail_msg() {
        log_failure_msg "$1"
    }
    succ_msg() {
        log_success_msg " done."
    }
    begin_msg() {
        log_warning_msg "$@"
    }
else
	if [ "$system" = "redhat" ]; then
	   . /etc/init.d/functions
	   fail_msg() {
	       echo -n " "
	       echo_failure
	       echo
	       echo "  ($1)"
	   }
	   succ_msg() {
	       echo -n " "
	       echo_success
	       echo
	   }
	elif [ "$system" = "suse" ]; then
	     . /etc/rc.status
	     fail_msg() {
	         rc_failed 1
	         rc_status -v
	         echo "  ($1)"
	     }
	     succ_msg() {
	         rc_reset
	         rc_status -v
	     }
	elif [ "$system" = "gentoo" ]; then
	     if [ -f /sbin/functions.sh ]; then
	        . /sbin/functions.sh
	     elif [ -f /etc/init.d/functions.sh ]; then
	        . /etc/init.d/functions.sh
	     fi
	     fail_msg() {
	         eerror "$1"
	     }
	     succ_msg() {
	         eend "$?"
	     }
	     begin_msg() {
	         ebegin "$1"
	     }
	     if [ "`which $0`" = "/sbin/rc" ]; then
	        shift
	     fi
	elif [ "$system" = "archlinux" ]; then
	     . /etc/rc.conf
	     . /etc/rc.d/functions
		 ## FIXME: when failure() calls fail_msg(), nothing displays.
	     fail_msg() {
		 stat_fail "$1"
	     }
	     succ_msg() {
		 stat_done "$?"
	     }
		 begin_msg() {
		 stat_busy "$1"
		 }
	else
	     fail_msg() {
	         echo " ...failed!"
	         echo "  ($1)"
	     }
	     succ_msg() {
	         echo " ...done."
	     }
	fi
	
	if [ "$system" != "gentoo" ]; then
	   if [ "$system" != "archlinux" ]; then
		   begin_msg() {
		       [ -z "${1:-}" ] && return 1
		       if [ -z "${2:-}" ]; then
		          echo -n "$1"
		       else
		          echo -n "$1: $2"
		       fi
	   }
	   fi
	fi
fi
	
failure()
{
    fail_msg "$1"
    exit 0
}

running()
{
    lsmod | grep -q "$1[^_-]"
}

start()
{
    begin_msg "Starting $MODULE_NAME kernel module"
	## FIXME: when kernel module has loaded, it will be still "OK".
    if ! running $MODULE_NAME; then
        if ! modprobe $MODULE_NAME > /dev/null 2>&1; then
            failure "modprobe $MODULE_NAME failed. Please use 'dmesg' to find out why"
        fi
        sleep .2
    fi  
    succ_msg
}

stop()
{
    begin_msg "Stopping $MODULE_NAME kernel module"
	## FIXME: when kernel module has unloaded or does not exist, still "OK"
    if running $MODULE_NAME; then
        if ! rmmod $MODULE_NAME 2>/dev/null; then
            failure "Cannot unload module $MODULE_NAME"
        fi
    fi
    succ_msg
}


setup()
{
	## FIXME: the BUILDDRCOM script has not written yet.
    stop
    if find /lib/modules/`uname -r` -name "$MODULE_NAME\.*" 2>/dev/null|grep -q $MODULE_NAME; then
        begin_msg "Removing old $MODULE_NAME kernel module"
        find /lib/modules/`uname -r` -name "$MODULE_NAME\.*" 2>/dev/null|xargs rm -f 2>/dev/null
        succ_msg
    fi  

    begin_msg "Recompiling $MODULE_NAME kernel module"
    if ! $BUILDDRCOM \
        --save-module-symvers /tmp/$MODULE_NAME-Module.symvers \
        --no-print-directory install > $LOG 2>&1; then
        failure "Look at $LOG to find out what went wrong"
	fi

    rm -f /etc/$MODULE_NAME/module_not_compiled
    succ_msg
    start
}

dmnstatus()
{
    if running $MODULE_NAME; then
       echo "$MODULE_NAME kernel modules are loaded."
    else
        echo "$MODULE_NAME kernel module is not loaded."
    fi
}

case "$1" in
start)
    start
    ;;
stop)
    stop
    ;;
restart)
    stop && start
    ;;
force-reload)
    stop
    start
    ;;
setup)
    setup
    ;;
status)
    dmnstatus
    ;;
*)
    echo "Usage: $0 {start|stop|restart|force-reload|status|setup}"
    exit 1
esac

exit 0
